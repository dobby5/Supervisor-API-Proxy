name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Run unit tests
      run: |
        python -m pytest tests/test_app.py -v --tb=short --junitxml=junit/test-results-unit.xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v --tb=short --junitxml=junit/test-results-integration.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/test-results-*.xml

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit safety
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: black --check --diff app.py
    
    - name: Check import sorting with isort
      run: isort --check-only --diff app.py
    
    - name: Run flake8 linting
      run: flake8 app.py --max-line-length=100 --ignore=E203,W503 --statistics
    
    - name: Run Bandit security linter
      run: bandit -r app.py -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for security vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest tests/test_app.py
        coverage xml
        coverage report
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image for ${{ matrix.platform }}
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.platform }}
        push: false
        tags: ha-supervisor-proxy:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    services:
      mock-supervisor:
        image: python:3.11-slim
        ports:
          - 8080:8080
        env:
          FLASK_APP: mock_supervisor.py
        options: --health-cmd "curl -f http://localhost:8080/supervisor/ping" --health-interval 30s --health-timeout 10s --health-retries 5
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests flask
    
    - name: Create mock supervisor
      run: |
        cat > mock_supervisor.py << 'EOF'
        from flask import Flask, jsonify, request
        app = Flask(__name__)
        
        @app.before_request
        def check_auth():
            auth = request.headers.get('Authorization')
            if not auth or not auth.startswith('Bearer test-token'):
                return jsonify({"error": "Unauthorized"}), 401
        
        @app.route('/supervisor/ping')
        def ping():
            return jsonify({"result": "ok"})
        
        @app.route('/addons')
        def addons():
            return jsonify({"data": [{"slug": "test", "name": "Test"}]})
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=8080)
        EOF
    
    - name: Start mock supervisor
      run: |
        python mock_supervisor.py &
        sleep 5
      env:
        SUPERVISOR_TOKEN: test-token
    
    - name: Start proxy server
      run: |
        export SUPERVISOR_URL=http://localhost:8080
        export SUPERVISOR_TOKEN=test-token
        export PORT=8099
        python app.py &
        sleep 5
    
    - name: Run API tests
      run: |
        chmod +x tests/test_api.sh
        ./tests/test_api.sh --url http://localhost:8099 --token test-token
      env:
        SUPERVISOR_TOKEN: test-token

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-addon:
    name: Build Home Assistant Add-on
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    strategy:
      matrix:
        arch: [aarch64, amd64, armhf, armv7, i386]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Home Assistant Add-on
      uses: home-assistant/builder@2023.09.0
      with:
        args: |
          --${{ matrix.arch }} \
          --target . \
          --image "ghcr.io/${{ github.repository_owner }}/{arch}-addon-supervisor-proxy" \
          --cache-tag "cache" \
          --cache-from "ghcr.io/${{ github.repository_owner }}/{arch}-addon-supervisor-proxy:cache"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, code-quality, coverage, docker-build, api-tests, security-scan, build-addon]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.code-quality.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        echo "- API Tests: ${{ needs.api-tests.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Add-on Build: ${{ needs.build-addon.result }}"
    
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.code-quality.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "❌ Some CI/CD checks failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Docker Build: ${{ needs.docker-build.result }}"
        echo "- API Tests: ${{ needs.api-tests.result }}"
        echo "- Security Scan: ${{ needs.security-scan.result }}"
        echo "- Add-on Build: ${{ needs.build-addon.result }}"
        exit 1