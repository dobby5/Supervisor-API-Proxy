name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pip-audit
        pip install -r requirements.txt
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
      continue-on-error: true
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
      continue-on-error: true
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    - name: Run Bandit security linter
      run: |
        bandit -r app.py -f json -o bandit-report.json
        bandit -r app.py -f txt
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/flask
          p/docker
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: Upload Semgrep SARIF
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ha-supervisor-proxy:security-test .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ha-supervisor-proxy:security-test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-results.json'
    
    - name: Upload filesystem scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: trivy-filesystem-results
        path: trivy-fs-results.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for secret scanning
    
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check for security policy
      run: |
        if [ ! -f "SECURITY.md" ] && [ ! -f ".github/SECURITY.md" ] && [ ! -f "docs/SECURITY.md" ]; then
          echo "⚠️ Security policy not found. Consider adding a SECURITY.md file."
          echo "This file should include:"
          echo "- How to report security vulnerabilities"
          echo "- Security update policy"
          echo "- Supported versions"
          exit 1
        else
          echo "✅ Security policy found"
        fi
    
    - name: Check Dockerfile security best practices
      run: |
        echo "🔍 Checking Dockerfile for security best practices..."
        
        # Check if running as non-root user
        if ! grep -q "USER" Dockerfile; then
          echo "⚠️ Dockerfile should specify a non-root USER"
        fi
        
        # Check for COPY --chown usage
        if grep -q "COPY.*--chown" Dockerfile; then
          echo "✅ Using COPY with --chown for proper permissions"
        fi
        
        # Check for package manager cache cleanup
        if grep -q "rm -rf.*cache" Dockerfile || grep -q "apt-get clean" Dockerfile; then
          echo "✅ Package manager caches are being cleaned"
        fi
        
        # Check for specific package versions
        if grep -q "RUN.*install.*=" Dockerfile; then
          echo "✅ Using pinned package versions"
        fi
        
        echo "✅ Dockerfile security check completed"

  security-headers-test:
    name: Security Headers Test
    runs-on: ubuntu-latest
    needs: []
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests
    
    - name: Start application
      run: |
        export SUPERVISOR_TOKEN=test-token
        export PORT=8099
        python app.py &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        sleep 5
    
    - name: Test security headers
      run: |
        echo "🔍 Testing security headers..."
        
        # Test CORS headers
        RESPONSE=$(curl -s -I http://localhost:8099/api/v1/health)
        
        if echo "$RESPONSE" | grep -i "access-control-allow-origin"; then
          echo "✅ CORS headers present"
        else
          echo "⚠️ CORS headers not found"
        fi
        
        # Test for security headers that should be added
        MISSING_HEADERS=()
        
        if ! echo "$RESPONSE" | grep -i "x-content-type-options"; then
          MISSING_HEADERS+=("X-Content-Type-Options")
        fi
        
        if ! echo "$RESPONSE" | grep -i "x-frame-options"; then
          MISSING_HEADERS+=("X-Frame-Options")
        fi
        
        if ! echo "$RESPONSE" | grep -i "x-xss-protection"; then
          MISSING_HEADERS+=("X-XSS-Protection")
        fi
        
        if [ ${#MISSING_HEADERS[@]} -gt 0 ]; then
          echo "⚠️ Missing security headers: ${MISSING_HEADERS[*]}"
          echo "Consider adding these headers for better security"
        else
          echo "✅ All recommended security headers present"
        fi
    
    - name: Stop application
      if: always()
      run: |
        if [ -n "$APP_PID" ]; then
          kill $APP_PID || true
        fi

  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, docker-security-scan, secrets-scan, security-policy-check, security-headers-test]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: security-artifacts
    
    - name: Generate security report
      run: |
        echo "# 🛡️ Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date -u)" >> security-report.md
        echo "Repository: ${{ github.repository }}" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## 📊 Scan Results Summary" >> security-report.md
        echo "" >> security-report.md
        
        # Job results
        echo "| Scan Type | Status |" >> security-report.md
        echo "|-----------|--------|" >> security-report.md
        echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-report.md
        echo "| Code Security | ${{ needs.code-security-scan.result }} |" >> security-report.md
        echo "| Docker Security | ${{ needs.docker-security-scan.result }} |" >> security-report.md
        echo "| Secret Detection | ${{ needs.secrets-scan.result }} |" >> security-report.md
        echo "| Policy Compliance | ${{ needs.security-policy-check.result }} |" >> security-report.md
        echo "| Security Headers | ${{ needs.security-headers-test.result }} |" >> security-report.md
        echo "" >> security-report.md
        
        echo "## 🔍 Detailed Findings" >> security-report.md
        echo "" >> security-report.md
        
        # Check for artifacts and summarize findings
        if [ -d "security-artifacts" ]; then
          find security-artifacts -name "*.json" -type f | while read -r file; do
            echo "### $(basename "$file")" >> security-report.md
            echo "\`\`\`" >> security-report.md
            jq -r '. | keys[]' "$file" 2>/dev/null || echo "Unable to parse JSON" >> security-report.md
            echo "\`\`\`" >> security-report.md
            echo "" >> security-report.md
          done
        fi
        
        echo "## 📋 Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "- Regularly update dependencies to latest versions" >> security-report.md
        echo "- Monitor for new security vulnerabilities" >> security-report.md
        echo "- Review and update security configurations" >> security-report.md
        echo "- Implement additional security headers if needed" >> security-report.md
        echo "- Consider adding HTTPS/TLS termination" >> security-report.md
        
        cat security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: security-report.md
    
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🛡️ Security Scan Results\n\n${report.substring(0, 2000)}...\n\n*Full report available in workflow artifacts*`
          });