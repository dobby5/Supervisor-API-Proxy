name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if this is a pre-release (contains alpha, beta, rc, or dev)
        if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Release version: $VERSION"
        echo "Is prerelease: ${{ steps.get_version.outputs.is_prerelease }}"
    
    - name: Validate version format
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+([a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION"

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
        pip install black isort flake8 coverage
    
    - name: Run all tests
      run: |
        # Run unit tests with coverage
        coverage run -m pytest tests/test_app.py -v
        coverage report
        
        # Run integration tests
        python -m pytest tests/test_integration.py -v
        
        # Run code quality checks
        black --check app.py
        isort --check-only app.py  
        flake8 app.py --max-line-length=100 --ignore=E203,W503
    
    - name: Generate coverage report
      run: |
        coverage xml
        coverage html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ needs.validate-release.outputs.version }}
        path: |
          coverage.xml
          htmlcov/

  build-multi-arch:
    name: Build Multi-Architecture Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    
    strategy:
      matrix:
        arch: [aarch64, amd64, armhf, armv7, i386]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Login to Docker Hub (if configured)
      if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Home Assistant Add-on
      uses: home-assistant/builder@2023.09.0
      with:
        args: |
          --${{ matrix.arch }} \
          --target . \
          --image "ghcr.io/${{ github.repository_owner }}/{arch}-addon-supervisor-proxy" \
          --cache-tag "${{ needs.validate-release.outputs.version }}" \
          --cache-from "ghcr.io/${{ github.repository_owner }}/{arch}-addon-supervisor-proxy:cache" \
          --version "${{ needs.validate-release.outputs.version }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, build-multi-arch]
    
    permissions:
      contents: write
      discussions: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        
        echo "## 🚀 Release $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          echo "### 📝 Changes since $LAST_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Group commits by type
          git log $LAST_TAG..HEAD --pretty=format:"%s" | while read -r line; do
            if [[ "$line" =~ ^feat(\(.*\))?:.*$ ]]; then
              echo "- ✨ $line" >> CHANGELOG.md
            elif [[ "$line" =~ ^fix(\(.*\))?:.*$ ]]; then
              echo "- 🐛 $line" >> CHANGELOG.md
            elif [[ "$line" =~ ^docs(\(.*\))?:.*$ ]]; then
              echo "- 📚 $line" >> CHANGELOG.md
            elif [[ "$line" =~ ^refactor(\(.*\))?:.*$ ]]; then
              echo "- ♻️ $line" >> CHANGELOG.md
            elif [[ "$line" =~ ^test(\(.*\))?:.*$ ]]; then
              echo "- 🧪 $line" >> CHANGELOG.md
            else
              echo "- 🔧 $line" >> CHANGELOG.md
            fi
          done
        else
          echo "### 📝 Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- 🎉 First release of Home Assistant Supervisor API Proxy" >> CHANGELOG.md
          echo "- 🚀 Full Supervisor API proxy functionality" >> CHANGELOG.md
          echo "- 📱 Android client support with Retrofit" >> CHANGELOG.md
          echo "- 🔒 Secure token-based authentication" >> CHANGELOG.md
          echo "- 📊 Health monitoring and API discovery" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### 🏗️ Supported Architectures" >> CHANGELOG.md
        echo "- aarch64 (ARM 64-bit)" >> CHANGELOG.md
        echo "- amd64 (x86 64-bit)" >> CHANGELOG.md
        echo "- armhf (ARM 32-bit)" >> CHANGELOG.md
        echo "- armv7 (ARM v7 32-bit)" >> CHANGELOG.md
        echo "- i386 (x86 32-bit)" >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "### 📦 Installation" >> CHANGELOG.md
        echo "1. Add this repository to your Home Assistant Add-on store" >> CHANGELOG.md
        echo "2. Install the \"Supervisor API Proxy\" add-on" >> CHANGELOG.md
        echo "3. Configure the add-on settings" >> CHANGELOG.md
        echo "4. Start the add-on" >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "### 🔗 Links" >> CHANGELOG.md
        echo "- [📚 Documentation](https://github.com/${{ github.repository }}#readme)" >> CHANGELOG.md
        echo "- [🐛 Report Issues](https://github.com/${{ github.repository }}/issues)" >> CHANGELOG.md
        echo "- [📱 Android Integration Guide](https://github.com/${{ github.repository }}/blob/main/docs/android-integration.md)" >> CHANGELOG.md
        
        cat CHANGELOG.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        generate_release_notes: true
        discussion_category_name: Releases
        files: |
          config.yaml
          Dockerfile
          README.md
          docs/**

  update-repository:
    name: Update Add-on Repository
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: github.repository_owner != 'homeassistant' # Only run for forks/custom repos
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Update repository.json
      run: |
        VERSION=${{ needs.validate-release.outputs.version }}
        
        # Create or update repository.json
        cat > repository.json << EOF
        {
          "name": "Home Assistant Supervisor API Proxy",
          "url": "https://github.com/${{ github.repository }}",
          "maintainer": "Home Assistant Community",
          "addons": {
            "supervisor_api_proxy": {
              "name": "Supervisor API Proxy",
              "description": "A REST API proxy for Home Assistant Supervisor to enable external access",
              "url": "https://github.com/${{ github.repository }}/tree/main",
              "version": "${VERSION#v}",
              "slug": "supervisor_api_proxy",
              "arch": [
                "aarch64",
                "amd64", 
                "armhf",
                "armv7",
                "i386"
              ],
              "image": "ghcr.io/${{ github.repository_owner }}/{arch}-addon-supervisor-proxy"
            }
          }
        }
        EOF
    
    - name: Commit repository.json
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add repository.json
        git commit -m "Update repository.json for release ${{ needs.validate-release.outputs.version }}" || exit 0
        git push

  publish-docker-hub:
    name: Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    if: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ha-supervisor-proxy:${{ needs.validate-release.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/ha-supervisor-proxy:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, update-repository]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.create-release.result == 'success' }}
      run: |
        echo "🎉 Release ${{ needs.validate-release.outputs.version }} created successfully!"
        echo "✅ Multi-architecture Docker images built and published"
        echo "✅ GitHub release created with changelog"
        echo "✅ Repository metadata updated"
        
        if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "true" ]; then
          echo "⚠️  This is a pre-release version"
        fi
    
    - name: Notify failure
      if: ${{ needs.create-release.result == 'failure' }}
      run: |
        echo "❌ Release ${{ needs.validate-release.outputs.version }} failed!"
        echo "Please check the workflow logs for details."
        exit 1

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Create post-release issue
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ needs.validate-release.outputs.version }}';
          const issueBody = `
          ## 🎉 Release ${version} Post-Release Tasks
          
          This issue tracks post-release tasks for version ${version}.
          
          ### ✅ Completed Tasks
          - [x] Multi-architecture Docker images built
          - [x] GitHub release created
          - [x] Repository metadata updated
          
          ### 📋 Follow-up Tasks
          - [ ] Update Home Assistant Add-on Store (if applicable)
          - [ ] Announce release in community forums
          - [ ] Update documentation website
          - [ ] Monitor for issues and feedback
          - [ ] Plan next release cycle
          
          ### 📊 Release Statistics
          - **Supported Architectures:** 5 (aarch64, amd64, armhf, armv7, i386)
          - **Release Type:** ${${{ needs.validate-release.outputs.is_prerelease }} ? 'Pre-release' : 'Stable'}
          - **Docker Images:** Available on GHCR and Docker Hub
          
          Please close this issue once all follow-up tasks are completed.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Post-Release Tasks for ${version}`,
            body: issueBody,
            labels: ['release', 'maintenance']
          });